---
import Button from "@components/Button.astro"
import Heading from "@components/Heading.astro"
import Paragraph from "@components/Paragraph.astro"
import { id, schema, validation } from "@db/index"
import Layout from "@layouts/Layout.astro"
import { eq } from "drizzle-orm"
import * as v from "valibot"

const { db, session } = Astro.locals

if (!session) {
	return Astro.redirect("/auth/login", 302)
}

const profile = await db.query.profiles.findFirst({
	where: (p, { eq }) => eq(p.userId, session.userId),
	columns: {
		username: true,
		name: true,
		does: true,
		website: true,
		bio: true,
		approvedAt: true,
	},
})

const errors = [
	["username", Astro.url.searchParams.get("error.username")],
	["name", Astro.url.searchParams.get("error.name")],
	["does", Astro.url.searchParams.get("error.does")],
	["website", Astro.url.searchParams.get("error.website")],
	["bio", Astro.url.searchParams.get("error.bio")],
].filter(([_, value]) => !!value)

const success = !!Astro.url.searchParams.get("success")

if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData()
		const unsafeWebsite = data.get("website")?.toString()
		const safeWebsite =
			unsafeWebsite &&
			new URL(
				unsafeWebsite.startsWith("http")
					? unsafeWebsite
					: `https://${unsafeWebsite}`,
			)

		const create = {
			username: data.get("username")?.toString() ?? "",
			name: data.get("name")?.toString() ?? "",
			does: data.get("does")?.toString() ?? "",
			website: safeWebsite?.toString() ?? "",
			bio: data.get("bio")?.toString() ?? "",
		}

		const returnUrl = new URL(Astro.url.pathname, Astro.url.origin)
		returnUrl.searchParams.set("username", create.username)
		returnUrl.searchParams.set("name", create.name)
		returnUrl.searchParams.set("does", create.does)
		returnUrl.searchParams.set("website", create.website)
		returnUrl.searchParams.set("bio", create?.bio)

		const parsed = v.safeParse(validation.profileSchema, create)

		if (!parsed.success) {
			for (const issue of parsed.issues) {
				if (issue.path) {
					returnUrl.searchParams.set(
						`error.${issue.path.map((p) => p.key).join(".")}`,
						issue.message,
					)
				}
			}
			return Astro.redirect(returnUrl.toString())
		}

		// Check the username is not already taken
		const existing = await db.query.profiles.findFirst({
			where: (p, { eq }) => eq(p.username, parsed.output.username),
			columns: {
				id: true,
				userId: true,
				username: true,
			},
		})

		if (existing && existing.userId !== session.userId) {
			returnUrl.searchParams.set("error.username", "username is already taken")
			return Astro.redirect(returnUrl.toString())
		}

		if (existing) {
			await db
				.update(schema.profiles)
				.set({
					...parsed.output,
				})
				.where(eq(schema.profiles.id, existing.id))
		} else {
			await db.insert(schema.profiles).values({
				id: id("profile"),
				userId: session.userId,
				...parsed.output,
			})
		}

		const redirect = new URL("/profile", Astro.url.origin)
		redirect.searchParams.set("success", "true")

		return Astro.redirect(redirect.toString())
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message)
		}
	}
}
---

<Layout title={profile?.name ?? "profile"}>
  <main class="max-w-xl flex flex-col gap-10">
    {success && (
      <div class="fixed bottom-4 right-4 p-2 md:right-8 lg:right-12 bg-foreground text-background font-bold text-sm" data-success-toast>
        <Paragraph>+ profile saved!</Paragraph>
      </div>
    )}

    <header class="flex flex-col gap-2">
      <Heading level="h1">profile</Heading>
      <Paragraph class="text-sm">
        your information that's shown in the directory{(!profile || !profile.approvedAt) && " once approved"}
      </Paragraph>
    </header>

    {errors.length > 0 && (
      <div class="font-bold text-sm">
        <Paragraph>there {errors.length === 1 ? "was an issue" : "were some issues"} with your profileâ€¦</Paragraph>
        <ul>
          {errors.map(([key, error]) => (
            <li>
              <Paragraph>&nbsp;+ {error}</Paragraph>
            </li>
          ))}
        </ul>
      </div>
    )}

    <form method="POST" class="flex flex-col gap-8">
      <label class="flex flex-col cursor-pointer">
        <Paragraph class="text-sm">
          <span class="font-bold">
            {errors.some(([key]) => key === "username") && "+ "}username
          </span>
          <span class="sr-only">;</span>
          <span class="block">
            yvr.page/people/<span class="font-bold" data-username-placeholder></span>
          </span>
        </Paragraph>
        <input
          type="text"
          name="username"
          value={profile?.username ?? ""}
          class="text-sm leading-snug py-3 appearance-none outline-none bg-background border-b-2 border-foreground/20 hover:border-foreground/30 focus-visible:border-foreground motion-safe:transition-colors motion-safe:duration-150 motion-safe:ease-out"
        />
      </label>
      
      <label class="flex flex-col cursor-pointer">
        <Paragraph class="text-sm">
          <span class="font-bold">
            {errors.some(([key]) => key === "name") && "+ "}name
          </span>
          (optional)<span class="sr-only">;</span>
          <span class="block">
            will fall back to your username if not set
          </span>
        </Paragraph>
        <input
          type="text"
          name="name"
          value={profile?.name ?? ""}
          class="text-sm leading-snug py-3 appearance-none outline-none bg-background border-b-2 border-foreground/20 hover:border-foreground/30 focus-visible:border-foreground motion-safe:transition-colors motion-safe:duration-150 motion-safe:ease-out placeholder:text-foreground/30"
        />
      </label>

      <label class="flex flex-col cursor-pointer">
        <Paragraph class="text-sm">
          <span class="font-bold">
            {errors.some(([key]) => key === "does") && "+ "}what do you do?
          </span>
          <span class="sr-only">;</span>
          <span class="block">
            for example: painter, software engineer, photographer, etc.
          </span>
        </Paragraph>
        <input
          type="text"
          name="does"
          value={profile?.does ?? ""}
          class="text-sm leading-snug py-3 appearance-none outline-none bg-background border-b-2 border-foreground/20 hover:border-foreground/30 focus-visible:border-foreground motion-safe:transition-colors motion-safe:duration-150 motion-safe:ease-out"
        />
      </label>

      <label class="flex flex-col cursor-pointer">
        <Paragraph class="text-sm">
          <span class="font-bold">
            {errors.some(([key]) => key === "website") && "+ "}website or social profile
          </span>
          <span class="sr-only">;</span>
          <span class="block">
            will be linked so people can contact you
          </span>
        </Paragraph>
        <input
          type="text"
          inputmode="url"
          name="website"
          value={profile?.website ?? ""}
          class="text-sm leading-snug py-3 appearance-none outline-none bg-background border-b-2 border-foreground/20 hover:border-foreground/30 focus-visible:border-foreground motion-safe:transition-colors motion-safe:duration-150 motion-safe:ease-out"
        />
      </label>

      <label class="flex flex-col cursor-pointer">
        <Paragraph class="text-sm">
          <span class="font-bold">
            {errors.some(([key]) => key === "bio") && "+ "}short bio
          </span>
          <span class="sr-only">;</span>
          <span class="block">
            a prompt: what are you passionate about? what is your purpose? what are you looking for in life?
          </span>
        </Paragraph>
        <textarea
          name="bio"
          rows="4"
          class="text-sm leading-normal py-3 outline-none bg-background border-b-2 border-foreground/20 hover:border-foreground/30 focus-visible:border-foreground motion-safe:transition-colors motion-safe:duration-150 motion-safe:ease-out resize-none"
        >{profile?.bio ?? ""}</textarea>
      </label>

      <Button type="submit">save</Button>
    </form>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const usernamePlaceholder = document.querySelector<HTMLSpanElement>('[data-username-placeholder]')
    const usernameInput = document.querySelector<HTMLInputElement>('input[name="username"]')
    const nameInput = document.querySelector<HTMLInputElement>('input[name="name"]')
    
    function onInputChange() {
      if (usernamePlaceholder && usernameInput) {
        const inputValue = usernameInput.value.trim()
        usernamePlaceholder.textContent = inputValue || ""
      }

      if (usernameInput && nameInput) {
        nameInput.placeholder = usernameInput.value.trim()
      }
    }

    usernameInput?.addEventListener('input', onInputChange)

    const successToast = document.querySelector<HTMLDivElement>('[data-success-toast]')
    if (successToast) {
      setTimeout(() => {
        successToast.remove()
      }, 3000)
    }
  });
</script>