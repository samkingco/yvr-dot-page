---
import Paragraph from "@components/Paragraph.astro"

interface Props {
	title: string
	description?: string
}

const {
	title,
	description = "a community site for meeting new folks in Vancouver who are into art, technology, music, and other creative pursuits",
} = Astro.props

const { session, db } = Astro.locals
const pathname = new URL(Astro.request.url).pathname

let isAdmin = false
if (session) {
	const user = await db.query.users.findFirst({
		where: (p, { eq }) => eq(p.id, session.userId),
		columns: {
			role: true,
		},
	})
	isAdmin = user?.role === "admin"
}

const weather = await db.query.weather.findFirst({
	orderBy: (table, { desc }) => desc(table.createdAt),
	columns: {
		description: true,
		temp: true,
	},
})

let weatherString = ""
if (weather) {
	weatherString = `${weather.description.toLowerCase()} â€¢ ${weather.temp}C`
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon-light.svg" media="(prefers-color-scheme: light)" />
    <link rel="icon" type="image/svg+xml" href="/favicon-dark.svg" media="(prefers-color-scheme: dark)" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="https://yvr.page/og-image.png" />
    <meta property="og:url" content="https://yvr.page" />
    <meta property="og:site_name" content={title} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="https://yvr.page/og-image.png" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@yvrdotpage" />
  </head>
  <body>
    <header class="fixed top-0 left-0 w-full h-[--header-size] pointer-events-none bg-gradient-to-b from-background to-transparent from-50%">
      <nav class="flex gap-4 pointer-events-auto px-4 md:px-8 lg:px-12 pt-8">
        <ul class="flex-1 flex gap-6 text-sm font-bold">
          <li>
            <Paragraph>
              {pathname === "/"
                ? <span class="active-link">directory</span>
                : <a href="/" class="internal-link">directory</a>
              }
            </Paragraph>
          </li>
          <li>
            <Paragraph>
              {pathname === "/about"
                ? <span class="active-link">about</span>
                : <a href="/about" class="internal-link">about</a>
              }
            </Paragraph>
          </li>
        </ul>
        {session ? (
          <ul class="flex gap-6 text-sm">
            <li>
              <Paragraph class="font-bold">
                {pathname === "/profile"
                  ? <span class="active-link">profile</span>
                  : <a href="/profile" class="internal-link">profile</a>
                }
              </Paragraph>
            </li>
            <li>
              <form method="POST" action="/auth/logout">
                <button type="submit" class="internal-link text-sm leading-snug font-bold appearance-none">  
                  log out
                </button>
              </form>
            </li>
            {isAdmin && (
              <li>
                <Paragraph class="font-bold">
                  {pathname === "/admin"
                    ? <span class="active-link">admin</span>
                    : <a href="/admin" class="internal-link">admin</a>
                  }
                </Paragraph>
              </li>
            )}
          </ul>
        ) : (
          <ul class="flex gap-6 text-sm">
            <li>
              <Paragraph class="font-bold">
                {pathname === "/auth/login"
                  ? <span class="active-link">log in</span>
                  : <a href="/auth/login" class="internal-link">log in</a>
                }
              </Paragraph>
            </li>
            <li>
              <Paragraph class="font-bold">
                {pathname === "/auth/signup"
                  ? <span class="active-link">sign up</span>
                  : <a href="/auth/signup" class="internal-link">sign up</a>
                }
              </Paragraph>
            </li>
          </ul>
        )}
      </nav>
    </header>
    <div class="flex-1 pt-[--header-size] pb-[--footer-size] px-4 md:px-8 lg:px-12">
      <slot />
    </div>
    <footer class="fixed bottom-0 left-0 w-full h-[--footer-size] pointer-events-none bg-gradient-to-b from-transparent to-background to-50% flex flex-col justify-end items-end">
      <div class="flex gap-4 pointer-events-auto px-4 md:px-8 lg:px-12 pb-4">
        <Paragraph class="text-sm">
          {weatherString && (
            <>{weatherString} &bull; </>
          )}
          <span data-current-time>00:00:00</span>
        </Paragraph>
      </div>
    </footer>
  </body>
</html>

<style is:global>
  @font-face {
    font-family: "CommitMono";
    src: url("/fonts/CommitMono VariableFont.woff2") format("woff");
    font-weight: normal;
    font-style: normal;
    font-display: swap;
  }

  :root {
    --foreground: 240, 10%, 10%;
    --background: 40, 10%, 98%;
    --header-size: 6em;
    --footer-size: 8em;
  }
  
  @media (prefers-color-scheme: dark) {
    :root {
      --foreground: 240, 10%, 90%;
      --background: 40, 10%, 4%;
    }
  }
  
  html {
    font-size: 14px;
  }

  html, body {
    height: 100%;
    -webkit-overflow-scrolling: touch;
  }

  body {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-feature-settings: "ss01", "ss03", "ss04", "ss05";
    background: hsla(var(--background), 1);
    color: hsla(var(--foreground), 1);
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  .invert {
    --foreground: var(--background);
    --background: var(--foreground);
  }

  .active-link {
    @apply inline-block;
    @apply text-background bg-foreground;
    @apply px-0.5 -mx-0.5;
  }

  .internal-link {
    @apply inline-block;
    @apply hover:text-background hover:bg-foreground;
    @apply focus-visible:text-background focus-visible:bg-foreground outline-none;
    @apply px-0.5 -mx-0.5;
    @apply motion-safe:transition-colors motion-safe:duration-150 motion-safe:ease-out;
  }
</style>

<script is:inline>
  function updateCurrentTime() {
    const currentTime = document.querySelector('[data-current-time]');
    if (currentTime) {
      const now = new Date();
      const formatter = new Intl.DateTimeFormat('en-CA', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false,
        timeZone: 'America/Vancouver'
      });
      currentTime.textContent = formatter.format(now);

      setTimeout(updateCurrentTime, 1000);
    }
  }

  document.addEventListener('DOMContentLoaded', updateCurrentTime);
</script>